{"version":3,"sources":["functions.js","Components/TempChart.js","Components/ModalChart.js","Components/OpenChartButton.js","Components/Sensor.js","Components/Header.js","Components/SensorList.js","App.js","index.js"],"names":["getUnit","unitName","getSensorType","sensorType","getTimeWithOffset","time","offset","moment","Date","parse","add","toDate","TempChart","props","getChartData","url","setState","state","isFetching","sensorId","timeinterval","console","log","fetch","headers","then","response","json","result","Data","catch","e","timer","sensorName","sensorUnitName","sensor","this","setInterval","clearInterval","secondLine","data","interpolation","y","x","style","fill","stroke","opacity","labels","fontSize","parent","border","className","onClick","setimeinterval","domainPadding","padding","left","right","top","bottom","theme","VictoryTheme","material","fixLabelOverlap","tickFormat","t","toLocaleTimeString","navigator","language","hour","minute","toLocaleDateString","day","month","dependentAxis","label","axisLabel","tickLabels","grid","tick","ti","React","Component","ModalChart","message","isOpen","onClose","children","ReactDOM","createPortal","document","body","OpenChartButton","setTimerMethod","unsetTimerMethod","useState","open","setOpen","Sensor","lastGoodValueMoment","now","lastGoodValue","toLocaleString","locationName","id","Header","headerText","SensorList","startFetch","fetchSensors","unsetTimer","Sensors","map","App","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73f40be8.chunk.js","sourcesContent":["\r\nimport moment from 'moment'\r\n\r\n\r\nfunction getUnit(unitName){\r\nswitch (unitName){\r\n    case '%':return \"%\";\r\n    case 'volt':return \"V\";\r\n    default: return \"\\u00b0C\";\r\n}\r\n}\r\n\r\nfunction getSensorType(sensorType){\r\n    switch (sensorType){\r\n        case 'temp':return \"Температура\";break;\r\n        case 'hum':return \"Влажность\";break;\r\n        case 'volt':return \"Напряжение\";break;\r\n        default:return \"Неизвестный тип\";break;\r\n    }\r\n}\r\n\r\nfunction getTimeWithOffset(time,offset){\r\n    return moment(Date.parse(time)).add(offset, 'h').toDate();\r\n}\r\n\r\nfunction getSensorBGColorClass(time){\r\n    let th;\r\n    th=moment(time).add(1,\"h\");\r\n    if (th<moment(getTimeWithOffset(new Date(moment.now()),0))) {\r\n        return \"sensor-item-red\"\r\n    }else\r\n    {\r\n        return \"sensor-item\"\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport  {getUnit,getSensorType,getTimeWithOffset,getSensorBGColorClass};\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport {VictoryLine, VictoryChart, VictoryAxis, VictoryTheme} from 'victory';\r\nimport './chartHolder.css'\r\nimport {getUnit} from \"../functions\";\r\n\r\nconst DATA_SERVICE_URL=\"http://home.remlo.ru:8081/api/data/\"\r\n\r\n\r\n\r\nclass TempChart  extends React.Component<any, any> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.timer = null;\r\n        this.sensorId =props.sensorId;\r\n        this.sensorName=props.sensorName;\r\n        this.sensorUnitName=props.sensorUnitName;\r\n        this.sensor=props.sensor;\r\n        this.timeinterval=\"hour\";\r\n        this.state = {\r\n            isFetching: false,\r\n            Data: []\r\n        };\r\n        console.log(\"TempChart created\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getChartData()\r\n        this.timer = setInterval(() => this.getChartData(), 60000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer)\r\n    }\r\n\r\n\r\n    getChartData = () => {\r\n        this.setState({...this.state, isFetching: true})\r\n        if (this.sensorId!=null) {\r\n            let url;\r\n            url=DATA_SERVICE_URL + this.sensorId + \"/\"+this.timeinterval;\r\n            console.log(url);\r\n            fetch(url, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }})\r\n                //.then(response => console.log(response.text())\r\n                .then(response => response.json())\r\n\r\n                .then(result => this.setState({\r\n                        Data: result,\r\n                        isFetching: false\r\n                    })\r\n\r\n                )\r\n                .catch(e => console.log(e));\r\n\r\n            console.log(this.state.Data);\r\n            console.log(this.state.isFetching);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"Waiting for sensor...\")\r\n        }\r\n    }\r\n\r\n     render() {\r\n         let secondLine;\r\n         if (this.timeinterval===\"week\"||this.timeinterval===\"month\"){\r\n             secondLine=(<VictoryLine\r\n                 data={this.state.Data}\r\n\r\n                 interpolation=\"natural\"\r\n                 y=\"value2\"\r\n                 x=\"moment\"\r\n                 style={{\r\n                     data: { fill: \"none\",stroke:\"red\", opacity: 0.7 },\r\n\r\n                     labels: { fontSize: 10 },\r\n                     parent: { border: \"1px solid #ccc\" },\r\n                     border: \"1px solid #ccc\",\r\n                     //labels={({ datum }) => datum.y},\r\n                     //labelComponent={<VictoryLabel renderInPortal dy={-20}/>}\r\n\r\n                 }}\r\n             />);\r\n\r\n         }\r\n\r\n        return (\r\n            <div className=\"ChartHolder\">\r\n                <div>{this.sensorName}</div>\r\n                <div><button className=\"button\" onClick={()=>{this.setimeinterval(\"hour\")}}>Hour</button>\r\n                <button className=\"button\" onClick={()=>this.setimeinterval(\"day\")}>Day</button>\r\n                <button className=\"button\" onClick={()=>this.setimeinterval(\"week\")}>Week</button>\r\n                    <button className=\"button\" onClick={()=>this.setimeinterval(\"month\")}>Month</button></div>\r\n\r\n                <VictoryChart\r\n                domainPadding={{ x: 0,y:[35,35] }\r\n                }\r\n                padding={{left:10,right:-10,top:10,bottom:80}}\r\n                theme={VictoryTheme.material}\r\n            >\r\n                <VictoryLine\r\n\r\n                    data={this.state.Data}\r\n\r\n                    interpolation=\"natural\"\r\n                    y=\"value\"\r\n                    x=\"moment\"\r\n\r\n                    style={{\r\n                        data: { fill: \"none\",\r\n                            stroke:\"blue\",\r\n                            opacity: 0.7 },\r\n\r\n                        labels: { fontSize: 10 },\r\n                        parent: { border: \"1px solid #ccc\" },\r\n                        border: \"1px solid #ccc\",\r\n                        //labels={({ datum }) => datum.y},\r\n                        //labelComponent={<VictoryLabel renderInPortal dy={-20}/>}\r\n\r\n                    }}\r\n\r\n                 />\r\n                    {secondLine}\r\n\r\n                    <VictoryAxis\r\n\r\n                        //label=\"Дата-время\"\r\n                        fixLabelOverlap={true}\r\n                        tickFormat={(t) =>(this.timeinterval===\"hour\"||this.timeinterval===\"day\")? `${new Date(t).toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})}`:\r\n                            `${new Date(t).toLocaleDateString(navigator.language, {day: '2-digit', month:'2-digit'})}`}\r\n                        style={{\r\n\r\n                            //axisLabel: { padding: 10 }\r\n                        }}\r\n\r\n\r\n                    />\r\n                    <VictoryAxis dependentAxis\r\n                                 label={getUnit(this.sensorUnitName)}\r\n                                 style={{\r\n                                     axisLabel: {fontSize: 20, padding: 40 },\r\n                                     tickLabels: {fontSize: 15, padding: 5},\r\n                                     grid: {stroke: ({ tick }) => tick === 0 ? \"red\" : \"grey\"}\r\n                                 }}\r\n                    />\r\n\r\n                </VictoryChart></div>);\r\n    }\r\n\r\n\r\n     setimeinterval(ti) {\r\n\r\n            this.timeinterval=ti;\r\n            this.getChartData();\r\n    }\r\n}\r\n\r\nexport default TempChart;\r\n","import React, {Component} from 'react'\r\nimport ReactDOM from \"react-dom\";\r\nimport TempChart from \"./TempChart\";\r\nimport './ModalChart.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ModalChart =({ message, isOpen, onClose, children, sensorId, sensorName,sensor, sensorUnitName })=> {\r\n        if (!isOpen) return null;\r\n        console.log(\"Modalchart created.\");\r\n        console.log(sensorId);\r\n        return ReactDOM.createPortal(\r\n            <div className=\"modal\">\r\n                    <TempChart sensorId={sensorId} sensorName={sensorName} sensor={sensor} sensorUnitName={sensorUnitName}/>\r\n\r\n                    <button className=\"ButtonLeftTop\" onClick={onClose}>[X]</button>\r\n            </div>\r\n            ,document.body);\r\n}\r\n\r\n\r\nexport default  ModalChart;\r\n\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport './OpenChartButton.css'\r\nimport ModalChart from \"./ModalChart\";\r\n\r\nfunction OpenChartButton({setTimerMethod,unsetTimerMethod, sensorId,sensorName,sensorUnitName}) {\r\n    const [open, setOpen] = useState(false)\r\n    const setTimer=()=>{\r\n        setOpen(false);\r\n        setTimerMethod();\r\n    }\r\n\r\n    const unsetTimer=()=>{\r\n\r\n        setOpen(true);\r\n        unsetTimerMethod();\r\n    }\r\n    return (\r\n<div>\r\n            <button onClick={() => {unsetTimer()}}>Chart</button>\r\n            <ModalChart\r\n                message=\"Hello World!\"\r\n                isOpen={open}\r\n                sensorId={sensorId}\r\n                sensorName={sensorName}\r\n                sensorUnitName={sensorUnitName}\r\n                onClose={() => {setTimer()}}\r\n            />\r\n</div>\r\n    )\r\n}\r\n\r\n\r\nexport default OpenChartButton;\r\n","import React from 'react'\r\nimport './Sensor.css'\r\nimport {getUnit,getSensorType,getTimeWithOffset,getSensorBGColorClass} from '../functions'\r\n\r\nimport OpenChartButton from \"./OpenChartButton\";\r\n\r\n\r\nconst Sensor=(props)=> {\r\n    const setTimer=()=>{\r\n        props.setTimerMethod();\r\n    }\r\n\r\n    const unsetTimer=()=>{\r\n        props.unsetTimerMethod();\r\n    }\r\n        return(\r\n            <div className={getSensorBGColorClass(getTimeWithOffset(props.sensor.lastGoodValueMoment,0))}>\r\n            <div className='sensor-item__title'>{props.sensor.sensorName}</div>\r\n            <div>\r\n                <p>{props.sensor.lastGoodValue}{getUnit(props.sensor.sensorUnitName)}</p>\r\n                <p>{getTimeWithOffset(props.sensor.lastGoodValueMoment,0).toLocaleString()}</p>\r\n                <p>{props.sensor.locationName}</p>\r\n                <p>{props.sensor.sensorId}</p>\r\n                <p>{getSensorType(props.sensor.sensorType)}</p>\r\n            </div>\r\n            <div className=\"container-center\">\r\n                <OpenChartButton  setTimerMethod={setTimer} unsetTimerMethod={unsetTimer} sensorId={props.sensor.id} sensorName={props.sensor.sensorName} sensor={props.sensor} sensorUnitName={props.sensor.sensorUnitName}/>\r\n\r\n            </div>\r\n           </div>\r\n\r\n        )\r\n\r\n\r\n}\r\n\r\n\r\nexport default Sensor;\r\n","import React from 'react'\r\nimport './Header.css';\r\n\r\n\r\n\r\n\r\nfunction Header (headerText){\r\n  return (\r\n      <header className='header'>\r\n            {headerText}\r\n      </header>\r\n  )\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react'\r\nimport './SensorList.css';\r\nimport Sensor from \"./Sensor\";\r\nimport Header from \"./Header\";\r\n\r\n\r\n\r\nconst QUOTE_SERVICE_URL = 'http://home.remlo.ru:8081/api/sensors'\r\n\r\nclass SensorList extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.timer = null;\r\n        this.state = {\r\n            isFetching: false,\r\n            Sensors: []\r\n        };\r\n        console.log(\"sensorList created.\")\r\n    }\r\n\r\nrender (){\r\n        return(\r\n            <div className=\"container-center\">\r\n            <div >{Header(\"Мои датчики\")}</div>\r\n            <div className=\"container\">{this.state.isFetching ? 'Fetching Sensors...' :  this.state.Sensors.map(sensor =>\r\n                <Sensor  setTimerMethod={this.startFetch} unsetTimerMethod={this.unsetTimer}  key={sensor.id} sensor={sensor} />\r\n            )}\r\n            </div>\r\n\r\n            </div>\r\n)\r\n\r\n}\r\n\r\n     startFetch=()=>{\r\n         this.fetchSensors()\r\n         this.timer = setInterval(() => this.fetchSensors(), 60000);\r\n         console.log(\"main timer started\")\r\n    }\r\n\r\n    unsetTimer=()=>{\r\n        clearInterval(this.timer)\r\n        console.log(\"main timer stopped\")\r\n    }\r\n\r\n    componentDidMount() {\r\n       this.startFetch();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsetTimer();\r\n    }\r\n\r\n\r\n    fetchSensors = () => {\r\n        this.setState({...this.state, isFetching: true})\r\n        fetch(QUOTE_SERVICE_URL, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }})\r\n            //.then(response => console.log(response.text())\r\n            .then(response => response.json())\r\n\r\n            .then(result => this.setState({\r\n                    Sensors: result,\r\n                    isFetching: false\r\n                })\r\n            )\r\n            .catch(e => console.log(e));\r\nconsole.log(\"log\")\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default SensorList\r\n","import './App.css';\r\nimport {Component} from \"react\";\r\nimport SensorList from \"./Components/SensorList\";\r\nimport Header from \"./Components/Header\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div className='App'>\r\n            <SensorList id=\"SensorList\"></SensorList>\r\n       </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}